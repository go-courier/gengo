package gengo

import (
	"bytes"
	"fmt"
	"go/parser"
	"go/scanner"
	"go/token"
	"io"
	"os"
	"path"
	"sort"
	"strings"

	"golang.org/x/tools/imports"

	"github.com/octohelm/gengo/pkg/namer"
)

type genfiles map[string]*genfile

func newGenfile() *genfile {
	return &genfile{
		imports: namer.NewDefaultImportTracker(),
		src:     bytes.NewBuffer(nil),
		body:    bytes.NewBuffer(nil),
	}
}

type genfile struct {
	generator Generator
	src       *bytes.Buffer
	body      *bytes.Buffer
	imports   namer.ImportTracker
	SnippetWriter
}

func (ff *genfile) InitWith(c Context) error {
	pkg := c.Package("")
	name := pkg.Pkg().Name()
	pkgPath := pkg.Pkg().Path()

	if _, err := fmt.Fprintf(ff.src, `package %s
`, name); err != nil {
		return err
	}

	ff.SnippetWriter = NewSnippetWriter(ff.body, map[string]namer.Namer{
		"raw": namer.NewRawNamer(pkgPath, ff.imports),
	})

	return nil
}

func (ff *genfile) WriteToFile(c Context, args *GeneratorArgs) error {
	// nothing generated
	if ff.body.Len() == 0 {
		return nil
	}

	writeImports(ff.src, ff.imports.Imports())

	if _, err := io.Copy(ff.src, ff.body); err != nil {
		return err
	}

	filename := path.Join(c.Package("").SourceDir(), fmt.Sprintf("%s.%s.go", args.OutputFileBaseName, ff.generator.Name()))
	data := ff.src.Bytes()

	lines := bytes.Split(data, []byte("\n"))

	if _, err := parser.ParseFile(token.NewFileSet(), filename, data, parser.AllErrors); err != nil {
		if sl, ok := err.(scanner.ErrorList); ok {
			for i := range sl {
				if i > 0 {
					// only should first error
					break
				}

				l := sl[i].Pos.Line

				fmt.Println(sl[i].Pos)

				for i := l - 10; i < l; i++ {
					if i > 0 {
						fmt.Printf("%d\t%s\n", i+1, string(lines[i]))
					}
				}

				col := sl[i].Pos.Column - 1
				if col < 0 {
					col = 0
				}
				fmt.Printf("\t%sâ†‘\n", strings.Repeat(" ", col))
				fmt.Println(sl[i].Msg)
				fmt.Println()
			}
		}
		return err
	}

	formated, err := imports.Process(filename, data, &imports.Options{
		FormatOnly: true,
		Comments:   true,
	})
	if err != nil {
		return err
	}

	f, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		if os.IsNotExist(err) {
			f, err = os.Create(filename)
			if err != nil {
				return err
			}
		}
		return err
	}

	defer f.Close()

	_, _ = fmt.Fprintf(f, `/*
Package %s GENERATED BY gengo:%s 
DON'T EDIT THIS FILE
*/
`, c.Package("").Pkg().Name(), ff.generator.Name())

	_, err = io.Copy(f, bytes.NewBuffer(formated))
	return err
}

func merge(tagsList ...map[string][]string) map[string][]string {
	mergedTags := make(map[string][]string, 0)

	for _, tags := range tagsList {
		for k, values := range tags {
			mergedTags[k] = values
		}
	}

	return mergedTags
}

func writeImports(w io.Writer, pathToName map[string]string) {
	importPaths := make([]string, 0)
	for p := range pathToName {
		importPaths = append(importPaths, p)
	}
	sort.Sort(sort.StringSlice(importPaths))

	if len(importPaths) > 0 {
		_, _ = fmt.Fprintf(w, `
import (
`)

		for _, p := range importPaths {
			_, _ = fmt.Fprintf(w, `	%s "%s"
`, pathToName[p], p)
		}

		_, _ = fmt.Fprintf(w, `)
`)
	}
}
